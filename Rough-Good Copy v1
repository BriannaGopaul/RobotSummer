#include <Arduino.h>
#include <ArduinoOTA.h>
#include <WiFi.h>
#include <ESP32Servo.h>
#include <motor.h>

const char* ssid = "nate1234";
const char* password = "nate1234";

//Motors
const int pwmPinA1 = 38;
const int pwmPinA2 = 37;
const int pwmPinB1 = 36;
const int pwmPinB2 = 35;

const int pwmChannelA1 = 0;
const int pwmChannelA2 = 1;
const int pwmChannelB1 = 2;
const int pwmChannelB2 = 3;
const int lazyChannel = 4;
const int clawArmChannel = 5;
const int clawChannel = 6;
const int cupChannel = 7;



//Servos
const int lazy = 9;
const int clawArm = 10;
const int claw = 11;
const int cupArm = 12;
const int cup = 13;


const int pwmResolution = 10;
const int motorResolution = 8;
const int maxDuty = pow(2,10) - 1;
const int motorFreq = 500;
const int servoFreq = 50;

const int frontRightG = 16;
const int frontLeftG = 15;

const int backRightG = 19;
const int backLeftG = 20;

//BACK
const int backR = 1;
const int backL = 2;

//RIGHT
const int rightF = 3;
const int rightB = 4;

//LEFT
const int leftF = 5;
const int leftB = 6;

//FRONT
const int frontR = 7; 
const int frontL = 8; 

//const int wifiLEDPin = 16;

//----Claw------


const int clawArmDown = 80;
const int clawArmUp = 50;
const int clawArmNeutral = 63;
const int clawOpen = 70;
const int clawClosed = 53;
const int clawPlate = 58;
const int cupArmIn = 30;
const int cupArmOut = 85;
const int cupOpen = 65;
const int cupClosed = 88;
const int lazyPickUp = 150;
const int lazyServe = 1;

//-----------------Steering--------------
//----Values-----
int FRval = 0;
int FLval = 0;
int BRval = 0;
int BLval = 0;
int FRvalOld = 0;
int FLvalOld = 0;
int BRvalOld = 0;
int BLvalOld = 0;

int default_speed = 235;
int direction = 1;
int lost_correction = 30; //How much duty cycle to add/subtract from wheels when steering for line following
int offset = 50; //
int tot_error = 0;

//----Offsets----
//Error Values
int proportional_error = 0;


//PID coefficients
double KP = 0.022; //porportional
double KD = 0.0;
double KI = 0.0;
int min_error = 1000;
int totalError = 0;
int prevError = 0;
//Thresholds

int lost_threshold = 500;
int line_threshold = 3000;
//
bool seenRightF = false;
bool seenRightB = false;
bool seenLeftF = false;
bool seenLeftB = false;
bool seenWhite = false;

int stations_left = 0;
int slow_speed = 90;

unsigned long starting_time;
long max_duration;
int servo_delay = 2;
//------------
Motor motorA (pwmPinA1, pwmPinA2, pwmChannelA1, pwmChannelA2);
Motor motorB (pwmPinB1, pwmPinB2, pwmChannelB1, pwmChannelB2);


void drive(bool forward, bool right, int stations);
void backtrack(bool right, bool forward);//changed
bool checkIfSeen(bool right);
bool checkIfSeenG(bool forward, bool right);
void grabFood();
void align(bool forward);
//void updateLineFollowing(bool forward);
void follow(int direction);
void follow_forward();
void follow_backward();
void check_pos();
void moveServo(int channel, int target, int current, int time);
void grabPlate();
void burger();
void dropPlate();
void rotate(int position);
void dropBurger();
void init();
void tristan_drive(bool forward, bool right, int stations);

enum position{
  LEFT,
  RITE,
  STRAIGHT,
  LOSTRIGHT,
  LOSTLEFT
};
position fPos = STRAIGHT;
position bPos = STRAIGHT;

int state = 3;
bool FORWARD = true;
bool RIGHT = true;

void setup() {
  ledcSetup(4, servoFreq, pwmResolution);
  ledcSetup(5, servoFreq, pwmResolution);
  ledcSetup(6, servoFreq, pwmResolution);
  ledcSetup(7, servoFreq, pwmResolution);

  ledcAttachPin(lazy, lazyChannel);
  ledcAttachPin(clawArm, clawArmChannel);
  ledcAttachPin(claw, clawChannel);
  ledcAttachPin(cupArm, cupChannel);

  Serial.begin(115200);

  if(state == 0){
    KP = 0.004;
    default_speed = 65;
  int startTime = millis();
  int currentTime = millis();
  while(currentTime - startTime < 2000){
    currentTime = millis();
    follow_backward();
  }
  motorA.setSpeed(0);
  motorB.setSpeed(0);

  }
  else if(state == 1){
    ledcWrite(clawArmChannel, clawArmUp);
    ledcWrite(clawChannel, clawOpen);
    ledcWrite(lazyChannel, lazyPickUp);
    ledcWrite(cupChannel, cupArmIn);
    drive(FORWARD, RIGHT, 1);
    delay(1000);
    align(FORWARD);
    delay(1000);
    moveServo(lazyChannel, lazyServe, lazyPickUp, 10);
    delay(3000);
    grabFood();
    moveServo(lazyChannel, lazyPickUp, lazyServe, 10);
    delay(3000);
    drive(!FORWARD, !RIGHT, 1);
    delay(1000);
    align(!FORWARD);
    delay(1000);
    grabFood();
    drive(!FORWARD, RIGHT, 1);
    moveServo(clawArmChannel, clawArmNeutral, clawArmUp, 40);
    moveServo(cupChannel, cupArmOut, cupArmOut, 30);
    ledcDetachPin(lazy);
    ledcAttachPin(cup, lazyChannel);
    ledcWrite(lazyChannel, cupOpen);
    delay(500);
    moveServo(cupChannel, cupArmIn, cupArmOut, 15);
    delay(200);
    ledcWrite(lazyChannel, cupClosed);

    
    
    

  } 
  else if (state == 2){
    
    delay(1000);
    ledcWrite(lazyChannel, 80);
    delay(1000);
    ledcWrite(lazyChannel, 1);
  }

  else if (state == 3){
    // ledcDetachPin(lazy);
    // ledcAttachPin(cup, lazyChannel);
    // ledcWrite(lazyChannel, cupOpen);
    // delay(500);
    // ledcWrite(lazyChannel, cupClosed);
    // delay(50);
    // ledcDetachPin(cup);
    // ledcAttachPin(lazy, lazyChannel);
    // ledcWrite(lazyChannel, lazyPickUp);


    //dropBurger();
    burger();
    
    //dropBurger();
    //burger();
    //rotate(lazyPickUp);
    //burger();
    // ledcWrite(clawArmChannel, clawArmUp);
    // ledcWrite(clawChannel, clawClosed);
    // ledcWrite(lazyChannel, lazyPickUp);
    // ledcWrite(cupChannel, cupArmIn);
    // ledcWrite(lazyChannel, 153);
    // drive(FORWARD, !RIGHT, 2 );
    // delay(500);
    // align(FORWARD);
    // delay(500);
    // drive(!FORWARD, RIGHT, 1 );
    // delay(500);
    // align(!FORWARD);
    

    
  }
}
void loop(){
  while(Serial.available())
  {
    String in_char = Serial.readStringUntil('\n');
    int dutyCycle = in_char.toInt();
    Serial.println(dutyCycle);
ledcWrite(cupChannel, dutyCycle);
delay(10);
  }
//follow(FORWARD);
// Serial.print("frontRight: ");
// Serial.println(analogRead(frontR));
// Serial.print("frontLeft: ");
// Serial.println(analogRead(frontL));
// Serial.print("backRight: ");
// Serial.println(analogRead(backR));
// Serial.print("backLeft: ");
// Serial.println(analogRead(backL));
// delay(500);

// Serial.print("Right Front: ");
// Serial.println(analogRead(rightF));
// Serial.print("Right Back: ");
// Serial.println(analogRead(rightB));
// Serial.print("Left Front: ");
// Serial.println(analogRead(leftF));
// Serial.print("Left Back: ");
// Serial.println(analogRead(leftB));

// motorA.setSpeed(260);
// motorB.setSpeed(260);
// for(int i = 0; i < 5000; i++){
// if(analogRead(rightB) > line_threshold ||
// analogRead(leftB) > line_threshold ||
// analogRead(rightF) > line_threshold ||
// analogRead(leftF) > line_threshold){
//   Serial.println("Yep you're fucked");
// }
// }
// motorA.setSpeed(0);
// motorB.setSpeed(0);
// for(int i = 0; i < 5000; i++){
// if(analogRead(rightB) > line_threshold ||
// analogRead(leftB) > line_threshold ||
// analogRead(rightF) > line_threshold ||
// analogRead(leftF) > line_threshold){
//   Serial.println("Yep you're fucked");
// }
// }



// Serial.print("frontRightG: ");
// Serial.println(analogRead(frontRightG));
// Serial.print("frontLeftG: ");
// Serial.println(analogRead(frontLeftG));
// Serial.print("backRightG: ");
// Serial.println(analogRead(backRightG));
// Serial.print("backLeftG: ");
// Serial.println(analogRead(backLeftG));
// delay(1000);
  } 


void drive(bool forward, bool right, int stations){
  int count = stations;
  bool seen = false;
  if(forward){
    direction = 1;
  } else{
    direction = -1;
  }
  int startTime = millis();
  int endTime = millis();
  while (endTime - startTime < 150){
    follow(direction);
    endTime = millis();
  }
    while (true){
      //Serial.println("in white");
      bool seen = checkIfSeenG(forward, right);
      //Serial.print(seen);
      if (seen){
        count--;
        if (count == 0){
          motorA.setSpeed(0);
          motorB.setSpeed(0);
          Serial.println("Finished a line");
          default_speed = 235;
          break;
        }
      }
      while (seen){ //if on black line just keep going straight don't update count
        seen = checkIfSeenG(forward, right);
        follow(direction);
        }
      follow(direction);
    }
  }

  void tristan_drive(bool forward, bool right, int stations){
  int count = stations;
  bool seen = false;
  if(forward){
    int startTime = millis();
  int endTime = millis();
  while (endTime - startTime < 150){
    follow_forward();
    endTime = millis();
  }
  while (true){
      //Serial.println("in white");
      bool seen = checkIfSeenG(forward, right);
      //Serial.print(seen);
      if (seen){
        count--;
        if (count == 0){
          motorA.setSpeed(0);
          motorB.setSpeed(0);
          Serial.println("Finished a line");
          default_speed = 235;
          break;
        }
      }
      while (seen){ //if on black line just keep going straight don't update count
        seen = checkIfSeenG(forward, right);
        follow_forward();
        }
      follow_forward();
    }

  } else{
    int startTime = millis();
  int endTime = millis();
  while (endTime - startTime < 150){
    follow_backward();
    endTime = millis();
      }
      while (true){
      //Serial.println("in white");
      bool seen = checkIfSeenG(forward, right);
      //Serial.print(seen);
      if (seen){
        count--;
        if (count == 0){
          motorA.setSpeed(0);
          motorB.setSpeed(0);
          Serial.println("Finished a line");
          default_speed = 235;
          break;
        }
      }
      while (seen){ //if on black line just keep going straight don't update count
        seen = checkIfSeenG(forward, right);
        follow_backward();
        }
      follow_backward();
    }
    }
  }


  void backtrack(bool right, bool forward){//changed
    default_speed = slow_speed;
    KP = 0.01;
    offset = 25;
    if(forward){
      while(!checkIfSeen(right)){
        follow(-1);
        }
    }else{
      while(!checkIfSeen(right)){
        follow(1);
        }
    }
    motorA.setSpeed(0);
    motorB.setSpeed(0);
    default_speed = 235;
    KP = 0.02; // 0.02 is what we were using for the full robot
    offset = 55;
  }


  void align(bool forward){
    if(forward){
      motorA.setSpeed(0);
      motorB.setSpeed(0);
      delay(500);
      if (analogRead(backR) > line_threshold && analogRead(backL) > line_threshold){
        //do nothing
      }
      else if(analogRead(backR) > analogRead(backL)){
        motorA.setSpeed(slow_speed);
        motorB.setSpeed(slow_speed*-1);
        int startTime = millis();
        while(analogRead(backR) < line_threshold || analogRead(backL) < line_threshold){
          if(millis()-startTime > 400){ // other way if no match in 0.25 s
            break;
          }
        }
        motorA.setSpeed(slow_speed*-1);
        motorB.setSpeed(slow_speed);
        while(analogRead(backR) < line_threshold || analogRead(backL) < line_threshold){
          //do nothing
        }

      }else {
        motorA.setSpeed(slow_speed*-1);
        motorB.setSpeed(slow_speed);
        int startTime = millis();
        while(analogRead(backR) < line_threshold || analogRead(backL) < line_threshold){
          if(millis()-startTime > 400){
            break;
          }
        }
        motorA.setSpeed(slow_speed);
        motorB.setSpeed(slow_speed*-1);
        while(analogRead(backR) < line_threshold || analogRead(backL) < line_threshold){
          //do nothing
        }
      }
      motorA.setSpeed(0);
      motorB.setSpeed(0);
    }
    
    else{
      motorA.setSpeed(0);
      motorB.setSpeed(0);
      delay(500);
      if (analogRead(frontR) > line_threshold || analogRead(frontL) > line_threshold){
        //do nothing
      }
      else if(analogRead(frontR) > analogRead(frontL)){
        motorA.setSpeed(slow_speed * -1);
        motorB.setSpeed(slow_speed);
        int startTime = millis();
        while(analogRead(frontR) < line_threshold || analogRead(frontL) < line_threshold){
          if(millis()-startTime > 400){ // other way if no match in 0.25 s
            break;
          }
        }
        motorA.setSpeed(slow_speed);
        motorB.setSpeed(-1 * slow_speed);
        while(analogRead(frontR) < line_threshold || analogRead(frontL) < line_threshold){
          //do nothing
        }

      }else {
        motorA.setSpeed(slow_speed);
        motorB.setSpeed(-1 * slow_speed);
        int startTime = millis();
        while(analogRead(frontR) < line_threshold || analogRead(frontL) < line_threshold){
          if(millis()-startTime > 400){
            break;
          }
        }
        motorA.setSpeed(-1 * slow_speed);
        motorB.setSpeed(slow_speed);
        while(analogRead(frontR) < line_threshold || analogRead(frontL) < line_threshold){
          //do nothing
        }
      }
      motorA.setSpeed(0);
      motorB.setSpeed(0);
    }
    Serial.println("Finished align");
  }


  bool checkIfSeen(bool right){
    if (right){
        return (analogRead(rightF) > line_threshold || analogRead(rightB) > line_threshold);
    } else {
        return (analogRead(leftF) > line_threshold || analogRead(leftB) > line_threshold);
      }
  }
  bool checkIfSeenG(bool forward, bool right){
    if (right){
      if (forward){
        return analogRead(frontRightG) > line_threshold;
      } else{
        return analogRead(backRightG) > line_threshold;
      }
    } else {
      if (forward){
        return analogRead(frontLeftG) > line_threshold;
      } else {
        return analogRead(backLeftG) > line_threshold;
      }
    }
  }



void follow_forward() {
      FRval= analogRead(frontR); 
      FLval = analogRead(frontL);
      BRval = analogRead(backR);
      BLval = analogRead(backL);
      check_pos();
          //THis is if we are off line in front
          if(fPos == LOSTLEFT){ 
              motorA.setSpeed(default_speed*direction - offset);
              motorB.setSpeed(default_speed*direction + offset);
          }
            else if(fPos == LOSTRIGHT){
              motorA.setSpeed(default_speed*direction + offset);
              motorB.setSpeed(default_speed*direction - offset);
            }

          else if(fPos == RITE || fPos == LEFT){
            int error = FRval - FLval;
            double P = KP * (error);
            motorA.setSpeed(constrain(default_speed * (direction) - round(P),  -245, 245));
            motorB.setSpeed(constrain(default_speed * (direction) + round(P), -245, 245));
          }
        }


void follow_backward(){
      FRval= analogRead(frontR); 
      FLval = analogRead(frontL);
      BRval = analogRead(backR);
      BLval = analogRead(backL);
      check_pos();
      if(bPos == LOSTLEFT){
          motorA.setSpeed(default_speed*direction + offset);
          motorB.setSpeed(default_speed*direction - offset);
        }
      else if(LOSTRIGHT){
          motorA.setSpeed(default_speed*direction - offset);
          motorB.setSpeed(default_speed*direction + offset);
          }

      else if(bPos == RITE || bPos == LEFT){
            int error = BLval - BRval;
            double P = KP * (error);
            motorA.setSpeed(constrain(default_speed * (direction) - round(P),  -245, 245));
            motorB.setSpeed(constrain(default_speed * (direction) + round(P), -245, 245));
          }
        }


void check_pos(){

  //** Case For the back

  //Case when back is Straight
  if(bPos == STRAIGHT){
    if(analogRead(backR) < line_threshold && analogRead(backL) >= line_threshold){
      bPos = RITE;
    }
    else if(analogRead(backL) < line_threshold && analogRead(backR) >= line_threshold){
      bPos = LEFT;
    }
    else if(analogRead(backR) >= line_threshold && analogRead(backL) >= line_threshold){
      bPos = STRAIGHT;
    }
    else{
      digitalWrite(LED_BUILTIN, 0);
    }
  }
  //Right of line case
  else if(bPos == RITE){
    if(analogRead(backR) >= line_threshold && analogRead(backL) >= line_threshold){
      bPos = STRAIGHT;
    }
    else if(analogRead(backR) < line_threshold && analogRead(backL) < line_threshold){
      bPos = LOSTRIGHT;
    }
  }
  //Left of line case
  else if(bPos == LEFT){
    if(analogRead(backR) >= line_threshold && analogRead(backL) >= line_threshold){
      bPos = STRAIGHT;
    }
    else if(analogRead(backR) < line_threshold && analogRead(backL) < line_threshold){
      bPos = LOSTLEFT;
    }
  }


  else if(BRval >= line_threshold && BLval >= line_threshold){
    bPos = STRAIGHT;
  }

  //**Case for going front

  //Case when back is Straight
  if(fPos == STRAIGHT){
    if(analogRead(frontR) < line_threshold && analogRead(frontL) >= line_threshold){
      fPos = RITE;
    }
    else if(analogRead(frontL) < line_threshold && analogRead(frontR) >= line_threshold){
      fPos = LEFT;
    }
    else if(analogRead(frontR) >= line_threshold && analogRead(frontL) >= line_threshold){
      fPos = STRAIGHT;
    }
    else{
      digitalWrite(LED_BUILTIN, 0);
    }
  }
  else if(fPos == RITE){
    if(analogRead(frontR) >= line_threshold && analogRead(frontL) >= line_threshold){
      fPos = STRAIGHT;
    }
    else if(analogRead(frontR) < line_threshold && analogRead(frontL) < line_threshold){
      fPos = LOSTRIGHT;
    }
  }
  else if(fPos == LEFT){
    if(analogRead(frontR) >= line_threshold && analogRead(frontL) >= line_threshold){
      fPos = STRAIGHT;
    }
    else if(analogRead(frontR) < line_threshold && analogRead(frontL) < line_threshold){
      fPos = LOSTLEFT;
    }
  }

  }

  void follow(int direction) {
      FRval= analogRead(frontR); 
      FLval = analogRead(frontL);
      BRval = analogRead(backR);
      BLval = analogRead(backL);
        //Forwards case 
        if (direction > 0){
          //THis is if we are off line in front
          if(FRval < 2000 && FLval < 2000){ 
            if(FRvalOld >= 2000){
              motorA.setSpeed(default_speed*direction - offset);
              motorB.setSpeed(default_speed*direction + offset);
            }
            else if(FLvalOld >= 2000){
              motorA.setSpeed(default_speed*direction + offset);
              motorB.setSpeed(default_speed*direction - offset);
            }
          }
          else{
            int error = FRval - FLval;
            double P = KP * (error);
            motorA.setSpeed(constrain(default_speed * (direction) - round(P),  -254, 254));
            motorB.setSpeed(constrain(default_speed * (direction) + round(P), -254, 254));
          }
        }
        //backwards case
        else{
          //THis is if we are off line in back
          if(BRval < 2000 && BLval < 2000){ 
            if(BRvalOld >= 2000){
              motorA.setSpeed(default_speed*direction + offset);
              motorB.setSpeed(default_speed*direction - offset);
            }
            else if(BLvalOld >= 2000){
              motorA.setSpeed(default_speed*direction - offset);
              motorB.setSpeed(default_speed*direction + offset);
            }
          }
          else{
            int error = BLval - BRval;
            double P = KP * (error);
            motorA.setSpeed(constrain(default_speed * (direction) - round(P),  -245, 245));
            motorB.setSpeed(constrain(default_speed * (direction) + round(P), -245, 245));
          }
        }
        FRvalOld = FRval;
        FLvalOld = FLval;
        BRvalOld = BRval;
        BLvalOld = BLval;
    }

void grabFood(){
  //ledcWrite(clawArmChannel, 80);
  moveServo(clawArmChannel, clawArmDown, clawArmUp, 25);// lower claw
  delay(100);
  moveServo(clawChannel, clawClosed, clawOpen, 20); //close claw
  //ledcWrite(clawChannel, 57);
  delay(250);
  moveServo(clawArmChannel, clawArmUp, clawArmDown, 20); //raise claw
  
  //ledcWrite(clawArmChannel, 60);
  delay(650);
  moveServo(clawChannel, clawOpen, clawClosed,15);//open claw
  //ledcWrite(clawChannel, 73);
}

void moveServo(int channel, int target, int current, int time) {
  if(target > current){
    for(int i = current; i <= target; i++) {
      ledcWrite(channel, i);
        delay(time);  
    }
  } 
  else {
    for (int i = current; i >= target; i--) {
        ledcWrite(channel, i);
          delay(time);
    }
  }
}

void grabPlate(){
  //ledcWrite(clawArmChannel, 80);
  moveServo(clawArmChannel, clawArmDown, clawArmUp, 40);// lower claw
  delay(200);
  moveServo(clawChannel, clawPlate, clawOpen,25); //close claw
  //ledcWrite(clawChannel, 57);
  delay(200);
  moveServo(clawArmChannel, clawArmNeutral, clawArmDown, 25); //raise claw
  //ledcWrite(clawArmChannel, 60);
  delay(250);
}

void dropPlate(){
  
  moveServo(lazyChannel, lazyServe, lazyPickUp, 20);
  //rotate(lazyServe);//rotate
  delay(1750);
  moveServo(clawChannel, clawOpen, clawPlate, 1); // open wide
  delay(150);
  moveServo(clawArmChannel, clawArmUp,clawArmNeutral, 10);
  delay(100);
  moveServo(lazyChannel, lazyPickUp, lazyServe, 20);
  //rotate(lazyPickUp);
  delay(1500);
  
}

void burger(){
  //Set up initial values
  ledcWrite(clawArmChannel, clawArmUp);
  ledcWrite(clawChannel, clawOpen);
  ledcWrite(lazyChannel, lazyPickUp);
  ledcWrite(cupChannel, cupArmIn);

  //TOP BUN : Drive to cutting and pick up top bun
  drive(FORWARD, !RIGHT, 1);
  delay(100);
  align(FORWARD);
  delay(100);
  //backtrack(!RIGHT, FORWARD);//changed
  //delay(500);
  grabFood();// grab Bottom bun

  //TOMATO: Drive to Tomatoe to pick up
  default_speed = 150;
  drive(!FORWARD, !RIGHT, 1);
  delay(100);
  default_speed = 235;
  align(!FORWARD);
  delay(100);
  //backtrack(!RIGHT, !FORWARD);//
  //delay(500);
  grabFood(); // grab Tomato

  // PATTY: Drive to Cooking for Patty pickup
  drive(FORWARD,!RIGHT,2);
  delay(100);
  align(FORWARD);
  delay(100);
  //backtrack(!RIGHT, FORWARD);//
  //delay(500);
  grabFood(); //grab Patty

  // LETTUCE: Drive to Lettuce and spin to pick up
  drive(FORWARD,RIGHT,1);
  delay(100);
  align(FORWARD);
  delay(100);
  //backtrack(RIGHT, FORWARD); //changed
  ledcWrite(lazyChannel, lazyServe);
  //rotate(lazyServe);
  delay(2000);
  grabFood(); // grab lettuce
  ledcWrite(lazyChannel, lazyPickUp);
  //rotate(lazyPickUp);
  delay(2200);
  
  //TOP BUN: Drive to cooking for Top Bun
  drive(!FORWARD, !RIGHT, 1);
  delay(100);
  align(!FORWARD);
  delay(100);
  //backtrack(!RIGHT, !FORWARD);//changed
  grabFood(); // grab top Bun

  // PLATE : Drive to Plate area to grab
  default_speed = 150;
  drive(FORWARD,!RIGHT,1);
  default_speed = 235;
  delay(100);
  align(FORWARD);
  delay(100);
  //backtrack(!RIGHT, FORWARD);//changed
  grabPlate();

  //SERVE: Go to Serving area
  int t1 = millis();
  int t2 = millis();
  while(t2 - t1 < 1300){
    t2 = millis();
    follow(-1);
  }
  motorA.setSpeed(0);
  motorB.setSpeed(0);

  //DROP PLATE: drop off the plate and rotate back
  dropPlate();
  
  //DROP BURGER: put burger on plate and bring back
  dropBurger();
}

void rotate(int position){
  if(position = lazyPickUp){
    moveServo(lazyChannel, position, lazyServe, 20);
  }
  else{
    moveServo(lazyChannel, position, lazyPickUp, 20);
  }
  delay(3000);
}

void dropBurger(){
    ledcDetachPin(lazy);
    ledcAttachPin(cup, lazyChannel);
    moveServo(clawArmChannel, clawArmDown, clawArmUp, 30); //Move claw down and out of way
    delay(750);
    Serial.println("yeet");
    moveServo(cupChannel, cupArmOut, cupArmIn, 50); // Move Cup out
    delay(2000);
    ledcWrite(lazyChannel, cupOpen); // Release Burger
    delay(500);
    moveServo(cupChannel, cupArmIn, cupArmOut, 20); // Move cup back in 
    delay(150);
    ledcWrite(lazyChannel, cupClosed); // Close cup claws
    delay(20);
    ledcDetachPin(cup);
    ledcAttachPin(lazy, lazyChannel);
    ledcWrite(lazyChannel, lazyPickUp);
}
void init(){
    ledcDetachPin(lazy);
    ledcAttachPin(cup, lazyChannel);
    ledcWrite(lazyChannel, cupClosed);
    ledcDetachPin(cup);
    ledcAttachPin(lazy, lazyChannel);
    ledcWrite(clawArmChannel, clawArmUp);
    ledcWrite(clawChannel, clawOpen);
    ledcWrite(lazyChannel, lazyPickUp);
    ledcWrite(cupChannel, cupArmIn);
}

